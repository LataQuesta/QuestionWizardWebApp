{
  "version": 3,
  "file": "countup.js-angular2.umd.js",
  "sources": [
    "ng://countup.js-angular2/countUp.module.ts",
    "ng://countup.js-angular2/countUp.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountUpDirective } from './countUp.directive';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        CountUpDirective\n    ],\n    exports: [\n        CountUpDirective\n    ]\n})\nexport class CountUpModule { }\n\n",
    "import { Directive, ElementRef, Input, HostListener, AfterViewInit } from '@angular/core';\nimport * as CountUp from 'countup.js';\n\n@Directive({\n  selector: '[countUp]'\n})\nexport class CountUpDirective implements AfterViewInit {\n\n  /**\n   * Optional extra configuration, such as easing.\n   */\n  @Input('countUp')\n  options: any;\n\n  /**\n   * Optional start value for the count. Defaults to zero.\n   */\n  @Input()\n  startVal: number;\n\n  /**\n   * The value to count up to.\n   */\n  private _endVal: number;\n\n  get endVal(): number {\n    return this._endVal;\n  }\n  @Input()\n  set endVal(value: number) {\n\n    this._endVal = value;\n\n    if (isNaN(value)) {\n      return;\n    }\n\n    if (!this.countUp) {\n      return;\n    }\n\n    this.countUp.update(value);\n  }\n\n  /**\n   * Optional duration of the animation. Default is two seconds.\n   */\n  @Input()\n  duration: number;\n\n  /**\n   * Optional number of decimal places. Default is two.\n   */\n  @Input()\n  decimals: number;\n\n  /**\n   * Optional flag for specifying whether the element should re-animate when clicked.\n   * Default is true.\n   */\n  @Input()\n  reanimateOnClick: boolean;\n\n  ngAfterViewInit() {\n    this.countUp = this.createCountUp(this.startVal, this.endVal, this.decimals, this.duration);\n    this.animate();\n  }\n\n  /**\n   * Re-animate if preference is set.\n   */\n  @HostListener('click')\n  onClick() {\n    if (this.reanimateOnClick) {\n      this.animate();\n    }\n  }\n\n  private countUp;\n\n  constructor(private el: ElementRef) {}\n\n  private createCountUp(sta, end, dec, dur) {\n    sta = sta || 0;\n    if (isNaN(sta)) sta = Number(sta.match(/[\\d\\-\\.]+/g).join('')); // strip non-numerical characters\n    end = end || 0;\n    if (isNaN(end)) end = Number(end.match(/[\\d\\-\\.]+/g).join('')); // strip non-numerical characters\n    dur = Number(dur) || 2;\n    dec = Number(dec) || 0;\n\n    // construct countUp\n    let countUp = new CountUp(this.el.nativeElement, sta, end, dec, dur, this.options);\n    if (end > 999) {\n      // make easing smoother for large numbers\n      countUp = new CountUp(this.el.nativeElement, sta, end - 100, dec, dur / 2, this.options);\n    }\n\n    return countUp;\n  }\n\n  private animate() {\n    this.countUp.reset();\n    if (this.endVal > 999) {\n      this.countUp.start(() => this.countUp.update(this.endVal));\n    } else {\n      this.countUp.start();\n    }\n  }\n}\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Input",
    "ElementRef"
  ],
  "mappings": ";;;;;;;;;;;;;;;QCgFA,IAAA,CAAA,EAAA,GAAoC,EAApC,CAAA;KAAA;IAAA,MAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;QAvDM,GAAN,EAAA,YAAA;YACA,OAAe,IAAf,CAAA,OAAA,CAAA;SACA;;;;;QAEM,GAAN,EAAA,UAAA,KAAA,EAAA;YAEQ,IAAR,CAAA,OAAA,GAAA,KAAA,CAAA;YAEQ,IAAR,KAAA,CAAA,KAAA,CAAA,EAAA;gBACA,OAAA;aACA;YAEQ,IAAR,CAAa,IAAb,CAAA,OAAA,EAAA;gBACA,OAAA;aACA;YAEQ,IAAR,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;IAyBA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;;;;;;;;IASA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;;;;;;;;;;;;IASA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAuD,UAAU,GAAjE,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QACI,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;QACf,IAAI,KAAK,CAAC,GAAG,CAAC;YAAE,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,GAAG,GAAG,GAAV,IAAiB,CAAjB,CAAA;QACI,IAAJ,KAAA,CAAA,GAAiB,CAAjB;;QAGI,GAAJ,GAAA,MAAA,CAAA,GAAA,CAAA,IAAQ,CAAR,CAAA;QACI,GAAJ,GAAA,MAAA,CAAiB,GAAjB,CAAA,IAAA,CAAA,CAAA;;QAEA,qBAAA,OAAA,GAAiC,IAAjC,OAAA,CAAA,IAAiD,CAAjD,EAAA,CAAA,aAAA,EAAA,GAAA,EAAA,GAAA,EAA8E,GAAG,EAAjF,GAAsF,EAAtF,IAAA,CAA6F,OAA7F,CAAA,CAAA;QACA,IAAA,GAAA,GAAA,GAAA,EAAA;;;;;;;;;IAQA,gBAAA,CAAA,SAAwB,CAAC,OAAzB,GAAmC,YAAnC;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QAAA,IAAA,CAAW,OAAX,CAAA,KAAA,EAAA,CAAA;QACA,IAAM,IAAI,CAAC,MAAX,GAAA,GAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;SAvGA;KACA,CAAA;IACA,OAAA,gBAAA,CAAA;;;;gBALA,QAAA,EAAA,WAAA;;;;AAiBA,gBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAWA,EAAA,IAAA,EAAAG,eAAA,GAAA;CAmBA,CAAA,EAAA,CAAA;AAMA,gBAAA,CAAA,cAAA,GAAA;IAOA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,UAAA,EAAA,IAAA,EAAA,CAAQ,SAAR,EAAA,EAAA,EAAA;IAWA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;;;;;;;;;;;ADlEA,IAAA,aAAA,kBAAA,YAAA;IACA,SAAA,aAAA,GAAA;KACA;IACA,OAAA,aAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,aAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;gBACA,OAAA,EAAA;oBACAD,mBAAA;iBACA;;;;;;;;;;;;;;;;;;;;;;;"
}
